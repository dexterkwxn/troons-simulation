<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="230" onload="init(evt)" viewBox="0 0 1200 230" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="230" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="213.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="213.00"> </text><svg id="frames" x="10" width="1180" total_samples="29966"><g><title>libsystem_platform.dylib`__bzero (81 samples, 0.27%)</title><rect x="0.0067%" y="149" width="0.2703%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="81"/><text x="0.2567%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_large (36 samples, 0.12%)</title><rect x="1.4216%" y="133" width="0.1201%" height="15" fill="rgb(217,0,24)" fg:x="426" fg:w="36"/><text x="1.6716%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (36 samples, 0.12%)</title><rect x="1.4216%" y="117" width="0.1201%" height="15" fill="rgb(221,193,54)" fg:x="426" fg:w="36"/><text x="1.6716%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (36 samples, 0.12%)</title><rect x="1.4216%" y="101" width="0.1201%" height="15" fill="rgb(248,212,6)" fg:x="426" fg:w="36"/><text x="1.6716%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.01%)</title><rect x="1.5451%" y="133" width="0.0100%" height="15" fill="rgb(208,68,35)" fg:x="463" fg:w="3"/><text x="1.7951%" y="143.50"></text></g><g><title>libgomp.1.dylib`gomp_init_task (11 samples, 0.04%)</title><rect x="1.6152%" y="101" width="0.0367%" height="15" fill="rgb(232,128,0)" fg:x="484" fg:w="11"/><text x="1.8652%" y="111.50"></text></g><g><title>libgcc_s.1.1.dylib`__emutls_get_address (4 samples, 0.01%)</title><rect x="1.6585%" y="85" width="0.0133%" height="15" fill="rgb(207,160,47)" fg:x="497" fg:w="4"/><text x="1.9085%" y="95.50"></text></g><g><title>libgomp.1.dylib`gomp_new_team (13 samples, 0.04%)</title><rect x="1.6519%" y="101" width="0.0434%" height="15" fill="rgb(228,23,34)" fg:x="495" fg:w="13"/><text x="1.9019%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (4 samples, 0.01%)</title><rect x="1.6819%" y="85" width="0.0133%" height="15" fill="rgb(218,30,26)" fg:x="504" fg:w="4"/><text x="1.9319%" y="95.50"></text></g><g><title>libgcc_s.1.1.dylib`__emutls_get_address (5 samples, 0.02%)</title><rect x="1.7019%" y="85" width="0.0167%" height="15" fill="rgb(220,122,19)" fg:x="510" fg:w="5"/><text x="1.9519%" y="95.50"></text></g><g><title>libgomp.1.dylib`gomp_resolve_num_threads (8 samples, 0.03%)</title><rect x="1.6953%" y="101" width="0.0267%" height="15" fill="rgb(250,228,42)" fg:x="508" fg:w="8"/><text x="1.9453%" y="111.50"></text></g><g><title>libgcc_s.1.1.dylib`__emutls_get_address (9 samples, 0.03%)</title><rect x="1.7653%" y="85" width="0.0300%" height="15" fill="rgb(240,193,28)" fg:x="529" fg:w="9"/><text x="2.0153%" y="95.50"></text></g><g><title>libgomp.1.dylib`gomp_barrier_wait (9 samples, 0.03%)</title><rect x="1.7954%" y="85" width="0.0300%" height="15" fill="rgb(216,20,37)" fg:x="538" fg:w="9"/><text x="2.0454%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.01%)</title><rect x="1.8154%" y="69" width="0.0100%" height="15" fill="rgb(206,188,39)" fg:x="544" fg:w="3"/><text x="2.0654%" y="79.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_post (5 samples, 0.02%)</title><rect x="1.8354%" y="69" width="0.0167%" height="15" fill="rgb(217,207,13)" fg:x="550" fg:w="5"/><text x="2.0854%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.01%)</title><rect x="1.8421%" y="53" width="0.0100%" height="15" fill="rgb(231,73,38)" fg:x="552" fg:w="3"/><text x="2.0921%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (390 samples, 1.30%)</title><rect x="1.8521%" y="53" width="1.3015%" height="15" fill="rgb(225,20,46)" fg:x="555" fg:w="390"/><text x="2.1021%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (5 samples, 0.02%)</title><rect x="3.1536%" y="53" width="0.0167%" height="15" fill="rgb(210,31,41)" fg:x="945" fg:w="5"/><text x="3.4036%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (3 samples, 0.01%)</title><rect x="3.1703%" y="53" width="0.0100%" height="15" fill="rgb(221,200,47)" fg:x="950" fg:w="3"/><text x="3.4203%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (3 samples, 0.01%)</title><rect x="3.1703%" y="37" width="0.0100%" height="15" fill="rgb(226,26,5)" fg:x="950" fg:w="3"/><text x="3.4203%" y="47.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_wait (399 samples, 1.33%)</title><rect x="1.8521%" y="69" width="1.3315%" height="15" fill="rgb(249,33,26)" fg:x="555" fg:w="399"/><text x="2.1021%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (455 samples, 1.52%)</title><rect x="3.1836%" y="69" width="1.5184%" height="15" fill="rgb(235,183,28)" fg:x="954" fg:w="455"/><text x="3.4336%" y="79.50"></text></g><g><title>libgomp.1.dylib`gomp_barrier_wait_end (866 samples, 2.89%)</title><rect x="1.8254%" y="85" width="2.8899%" height="15" fill="rgb(221,5,38)" fg:x="547" fg:w="866"/><text x="2.0754%" y="95.50">li..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (41 samples, 0.14%)</title><rect x="4.7153%" y="85" width="0.1368%" height="15" fill="rgb(247,18,42)" fg:x="1413" fg:w="41"/><text x="4.9653%" y="95.50"></text></g><g><title>libgomp.1.dylib`gomp_team_start (939 samples, 3.13%)</title><rect x="1.7220%" y="101" width="3.1336%" height="15" fill="rgb(241,131,45)" fg:x="516" fg:w="939"/><text x="1.9720%" y="111.50">lib..</text></g><g><title>troons_bonus`simulate(int, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::vector&lt;Link*, std::allocator&lt;Link*&gt; &gt; const&amp;, std::vector&lt;Link, std::allocator&lt;Link&gt; &gt;&amp;, std::vector&lt;Link*, std::allocator&lt;Link*&gt; &gt; const&amp;, std::array&lt;std::array&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, 3ul&gt;, 2ul&gt; const&amp;, int, std::array&lt;int, 3ul&gt;&amp;, int) (1,953 samples, 6.52%)</title><rect x="4.8622%" y="101" width="6.5174%" height="15" fill="rgb(249,31,29)" fg:x="1457" fg:w="1953"/><text x="5.1122%" y="111.50">troons_bo..</text></g><g><title>libgomp.1.dylib`GOMP_parallel (2,931 samples, 9.78%)</title><rect x="1.6052%" y="117" width="9.7811%" height="15" fill="rgb(225,111,53)" fg:x="481" fg:w="2931"/><text x="1.8552%" y="127.50">libgomp.1.dyli..</text></g><g><title>libgomp.1.dylib`gomp_sem_post (8 samples, 0.03%)</title><rect x="11.4396%" y="85" width="0.0267%" height="15" fill="rgb(238,160,17)" fg:x="3428" fg:w="8"/><text x="11.6896%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (6 samples, 0.02%)</title><rect x="11.4463%" y="69" width="0.0200%" height="15" fill="rgb(214,148,48)" fg:x="3430" fg:w="6"/><text x="11.6963%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (525 samples, 1.75%)</title><rect x="11.4697%" y="69" width="1.7520%" height="15" fill="rgb(232,36,49)" fg:x="3437" fg:w="525"/><text x="11.7197%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (3 samples, 0.01%)</title><rect x="13.2317%" y="53" width="0.0100%" height="15" fill="rgb(209,103,24)" fg:x="3965" fg:w="3"/><text x="13.4817%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (3 samples, 0.01%)</title><rect x="13.2417%" y="53" width="0.0100%" height="15" fill="rgb(229,88,8)" fg:x="3968" fg:w="3"/><text x="13.4917%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (3 samples, 0.01%)</title><rect x="13.2417%" y="37" width="0.0100%" height="15" fill="rgb(213,181,19)" fg:x="3968" fg:w="3"/><text x="13.4917%" y="47.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (11 samples, 0.04%)</title><rect x="13.2217%" y="69" width="0.0367%" height="15" fill="rgb(254,191,54)" fg:x="3962" fg:w="11"/><text x="13.4717%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (3 samples, 0.01%)</title><rect x="13.2584%" y="69" width="0.0100%" height="15" fill="rgb(241,83,37)" fg:x="3973" fg:w="3"/><text x="13.5084%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (3 samples, 0.01%)</title><rect x="13.2584%" y="53" width="0.0100%" height="15" fill="rgb(233,36,39)" fg:x="3973" fg:w="3"/><text x="13.5084%" y="63.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_wait (542 samples, 1.81%)</title><rect x="11.4663%" y="85" width="1.8087%" height="15" fill="rgb(226,3,54)" fg:x="3436" fg:w="542"/><text x="11.7163%" y="95.50">l..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (443 samples, 1.48%)</title><rect x="13.2750%" y="85" width="1.4783%" height="15" fill="rgb(245,192,40)" fg:x="3978" fg:w="443"/><text x="13.5250%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (3 samples, 0.01%)</title><rect x="14.7567%" y="85" width="0.0100%" height="15" fill="rgb(238,167,29)" fg:x="4422" fg:w="3"/><text x="15.0067%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (3 samples, 0.01%)</title><rect x="14.7734%" y="85" width="0.0100%" height="15" fill="rgb(232,182,51)" fg:x="4427" fg:w="3"/><text x="15.0234%" y="95.50"></text></g><g><title>libgomp.1.dylib`gomp_team_barrier_wait_end (1,010 samples, 3.37%)</title><rect x="11.4229%" y="101" width="3.3705%" height="15" fill="rgb(231,60,39)" fg:x="3423" fg:w="1010"/><text x="11.6729%" y="111.50">lib..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (3 samples, 0.01%)</title><rect x="14.7834%" y="85" width="0.0100%" height="15" fill="rgb(208,69,12)" fg:x="4430" fg:w="3"/><text x="15.0334%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (58 samples, 0.19%)</title><rect x="14.7934%" y="101" width="0.1936%" height="15" fill="rgb(235,93,37)" fg:x="4433" fg:w="58"/><text x="15.0434%" y="111.50"></text></g><g><title>libgomp.1.dylib`gomp_team_end (1,080 samples, 3.60%)</title><rect x="11.3962%" y="117" width="3.6041%" height="15" fill="rgb(213,116,39)" fg:x="3415" fg:w="1080"/><text x="11.6462%" y="127.50">libg..</text></g><g><title>troons_bonus`simulate(int, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::vector&lt;Link*, std::allocator&lt;Link*&gt; &gt; const&amp;, std::vector&lt;Link, std::allocator&lt;Link&gt; &gt;&amp;, std::vector&lt;Link*, std::allocator&lt;Link*&gt; &gt; const&amp;, std::array&lt;std::array&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, 3ul&gt;, 2ul&gt; const&amp;, int, std::array (4,029 samples, 13.45%)</title><rect x="1.5584%" y="133" width="13.4452%" height="15" fill="rgb(222,207,29)" fg:x="467" fg:w="4029"/><text x="1.8084%" y="143.50">troons_bonus`simulat..</text></g><g><title>dyld`start (4,501 samples, 15.02%)</title><rect x="0.0000%" y="165" width="15.0204%" height="15" fill="rgb(206,96,30)" fg:x="0" fg:w="4501"/><text x="0.2500%" y="175.50">dyld`start</text></g><g><title>troons_bonus`main (4,418 samples, 14.74%)</title><rect x="0.2770%" y="149" width="14.7434%" height="15" fill="rgb(218,138,4)" fg:x="83" fg:w="4418"/><text x="0.5270%" y="159.50">troons_bonus`main</text></g><g><title>troons_bonus`std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_default_append (3 samples, 0.01%)</title><rect x="15.0103%" y="133" width="0.0100%" height="15" fill="rgb(250,191,14)" fg:x="4498" fg:w="3"/><text x="15.2603%" y="143.50"></text></g><g><title>libsystem_platform.dylib`__bzero (151 samples, 0.50%)</title><rect x="15.0237%" y="165" width="0.5039%" height="15" fill="rgb(239,60,40)" fg:x="4502" fg:w="151"/><text x="15.2737%" y="175.50"></text></g><g><title>libgomp.1.dylib`DYLD-STUB$$pthread_mutex_lock (6 samples, 0.02%)</title><rect x="15.6177%" y="117" width="0.0200%" height="15" fill="rgb(206,27,48)" fg:x="4680" fg:w="6"/><text x="15.8677%" y="127.50"></text></g><g><title>libgomp.1.dylib`__aarch64_ldadd4_sync (7 samples, 0.02%)</title><rect x="15.6411%" y="117" width="0.0234%" height="15" fill="rgb(225,35,8)" fg:x="4687" fg:w="7"/><text x="15.8911%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (6 samples, 0.02%)</title><rect x="15.6744%" y="101" width="0.0200%" height="15" fill="rgb(250,213,24)" fg:x="4697" fg:w="6"/><text x="15.9244%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (4 samples, 0.01%)</title><rect x="15.6811%" y="85" width="0.0133%" height="15" fill="rgb(247,123,22)" fg:x="4699" fg:w="4"/><text x="15.9311%" y="95.50"></text></g><g><title>libgomp.1.dylib`gomp_barrier_wait (14 samples, 0.05%)</title><rect x="15.6644%" y="117" width="0.0467%" height="15" fill="rgb(231,138,38)" fg:x="4694" fg:w="14"/><text x="15.9144%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (5 samples, 0.02%)</title><rect x="15.6945%" y="101" width="0.0167%" height="15" fill="rgb(231,145,46)" fg:x="4703" fg:w="5"/><text x="15.9445%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (6 samples, 0.02%)</title><rect x="15.7378%" y="85" width="0.0200%" height="15" fill="rgb(251,118,11)" fg:x="4716" fg:w="6"/><text x="15.9878%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (6 samples, 0.02%)</title><rect x="15.7378%" y="69" width="0.0200%" height="15" fill="rgb(217,147,25)" fg:x="4716" fg:w="6"/><text x="15.9878%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.01%)</title><rect x="15.7579%" y="85" width="0.0100%" height="15" fill="rgb(247,81,37)" fg:x="4722" fg:w="3"/><text x="16.0079%" y="95.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_post (10 samples, 0.03%)</title><rect x="15.7378%" y="101" width="0.0334%" height="15" fill="rgb(209,12,38)" fg:x="4716" fg:w="10"/><text x="15.9878%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3,302 samples, 11.02%)</title><rect x="15.7779%" y="85" width="11.0192%" height="15" fill="rgb(227,1,9)" fg:x="4728" fg:w="3302"/><text x="16.0279%" y="95.50">libsystem_kernel..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (12 samples, 0.04%)</title><rect x="26.8738%" y="69" width="0.0400%" height="15" fill="rgb(248,47,43)" fg:x="8053" fg:w="12"/><text x="27.1238%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (9 samples, 0.03%)</title><rect x="26.9138%" y="69" width="0.0300%" height="15" fill="rgb(221,10,30)" fg:x="8065" fg:w="9"/><text x="27.1638%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (6 samples, 0.02%)</title><rect x="26.9238%" y="53" width="0.0200%" height="15" fill="rgb(210,229,1)" fg:x="8068" fg:w="6"/><text x="27.1738%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (6 samples, 0.02%)</title><rect x="26.9439%" y="69" width="0.0200%" height="15" fill="rgb(222,148,37)" fg:x="8074" fg:w="6"/><text x="27.1939%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (58 samples, 0.19%)</title><rect x="26.8004%" y="85" width="0.1936%" height="15" fill="rgb(234,67,33)" fg:x="8031" fg:w="58"/><text x="27.0504%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (9 samples, 0.03%)</title><rect x="26.9639%" y="69" width="0.0300%" height="15" fill="rgb(247,98,35)" fg:x="8080" fg:w="9"/><text x="27.2139%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (37 samples, 0.12%)</title><rect x="26.9939%" y="85" width="0.1235%" height="15" fill="rgb(247,138,52)" fg:x="8089" fg:w="37"/><text x="27.2439%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (33 samples, 0.11%)</title><rect x="27.0073%" y="69" width="0.1101%" height="15" fill="rgb(213,79,30)" fg:x="8093" fg:w="33"/><text x="27.2573%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (11 samples, 0.04%)</title><rect x="27.1174%" y="85" width="0.0367%" height="15" fill="rgb(246,177,23)" fg:x="8126" fg:w="11"/><text x="27.3674%" y="95.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_wait (3,412 samples, 11.39%)</title><rect x="15.7712%" y="101" width="11.3862%" height="15" fill="rgb(230,62,27)" fg:x="4726" fg:w="3412"/><text x="16.0212%" y="111.50">libgomp.1.dylib`g..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,142 samples, 3.81%)</title><rect x="27.1574%" y="101" width="3.8110%" height="15" fill="rgb(216,154,8)" fg:x="8138" fg:w="1142"/><text x="27.4074%" y="111.50">libs..</text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (4 samples, 0.01%)</title><rect x="30.9718%" y="101" width="0.0133%" height="15" fill="rgb(244,35,45)" fg:x="9281" fg:w="4"/><text x="31.2218%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (4 samples, 0.01%)</title><rect x="30.9851%" y="101" width="0.0133%" height="15" fill="rgb(251,115,12)" fg:x="9285" fg:w="4"/><text x="31.2351%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (3 samples, 0.01%)</title><rect x="31.0051%" y="101" width="0.0100%" height="15" fill="rgb(240,54,50)" fg:x="9291" fg:w="3"/><text x="31.2551%" y="111.50"></text></g><g><title>libgomp.1.dylib`gomp_barrier_wait_end (4,594 samples, 15.33%)</title><rect x="15.7111%" y="117" width="15.3307%" height="15" fill="rgb(233,84,52)" fg:x="4708" fg:w="4594"/><text x="15.9611%" y="127.50">libgomp.1.dylib`gomp_ba..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (7 samples, 0.02%)</title><rect x="31.0185%" y="101" width="0.0234%" height="15" fill="rgb(207,117,47)" fg:x="9295" fg:w="7"/><text x="31.2685%" y="111.50"></text></g><g><title>libgomp.1.dylib`gomp_team_barrier_wait (15 samples, 0.05%)</title><rect x="31.0485%" y="117" width="0.0501%" height="15" fill="rgb(249,43,39)" fg:x="9304" fg:w="15"/><text x="31.2985%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (11 samples, 0.04%)</title><rect x="31.0619%" y="101" width="0.0367%" height="15" fill="rgb(209,38,44)" fg:x="9308" fg:w="11"/><text x="31.3119%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (5 samples, 0.02%)</title><rect x="31.2187%" y="85" width="0.0167%" height="15" fill="rgb(236,212,23)" fg:x="9355" fg:w="5"/><text x="31.4687%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (5 samples, 0.02%)</title><rect x="31.2187%" y="69" width="0.0167%" height="15" fill="rgb(242,79,21)" fg:x="9355" fg:w="5"/><text x="31.4687%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7 samples, 0.02%)</title><rect x="31.2387%" y="85" width="0.0234%" height="15" fill="rgb(211,96,35)" fg:x="9361" fg:w="7"/><text x="31.4887%" y="95.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_post (18 samples, 0.06%)</title><rect x="31.2187%" y="101" width="0.0601%" height="15" fill="rgb(253,215,40)" fg:x="9355" fg:w="18"/><text x="31.4687%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (5 samples, 0.02%)</title><rect x="31.2621%" y="85" width="0.0167%" height="15" fill="rgb(211,81,21)" fg:x="9368" fg:w="5"/><text x="31.5121%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (3,950 samples, 13.18%)</title><rect x="31.3021%" y="85" width="13.1816%" height="15" fill="rgb(208,190,38)" fg:x="9380" fg:w="3950"/><text x="31.5521%" y="95.50">libsystem_kernel.dyl..</text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_droplock (10 samples, 0.03%)</title><rect x="44.5505%" y="69" width="0.0334%" height="15" fill="rgb(235,213,38)" fg:x="13350" fg:w="10"/><text x="44.8005%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (16 samples, 0.05%)</title><rect x="44.5839%" y="69" width="0.0534%" height="15" fill="rgb(237,122,38)" fg:x="13360" fg:w="16"/><text x="44.8339%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (10 samples, 0.03%)</title><rect x="44.6039%" y="53" width="0.0334%" height="15" fill="rgb(244,218,35)" fg:x="13366" fg:w="10"/><text x="44.8539%" y="63.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (9 samples, 0.03%)</title><rect x="44.6373%" y="69" width="0.0300%" height="15" fill="rgb(240,68,47)" fg:x="13376" fg:w="9"/><text x="44.8873%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (66 samples, 0.22%)</title><rect x="44.4871%" y="85" width="0.2202%" height="15" fill="rgb(210,16,53)" fg:x="13331" fg:w="66"/><text x="44.7371%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (12 samples, 0.04%)</title><rect x="44.6673%" y="69" width="0.0400%" height="15" fill="rgb(235,124,12)" fg:x="13385" fg:w="12"/><text x="44.9173%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_lock_slow (11 samples, 0.04%)</title><rect x="44.7073%" y="85" width="0.0367%" height="15" fill="rgb(224,169,11)" fg:x="13397" fg:w="11"/><text x="44.9573%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexwait (10 samples, 0.03%)</title><rect x="44.7107%" y="69" width="0.0334%" height="15" fill="rgb(250,166,2)" fg:x="13398" fg:w="10"/><text x="44.9607%" y="79.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (7 samples, 0.02%)</title><rect x="44.7440%" y="85" width="0.0234%" height="15" fill="rgb(242,216,29)" fg:x="13408" fg:w="7"/><text x="44.9940%" y="95.50"></text></g><g><title>libgomp.1.dylib`gomp_sem_wait (4,045 samples, 13.50%)</title><rect x="31.2788%" y="101" width="13.4986%" height="15" fill="rgb(230,116,27)" fg:x="9373" fg:w="4045"/><text x="31.5288%" y="111.50">libgomp.1.dylib`gomp..</text></g><g><title>libsystem_pthread.dylib`pthread_testcancel (3 samples, 0.01%)</title><rect x="44.7674%" y="85" width="0.0100%" height="15" fill="rgb(228,99,48)" fg:x="13415" fg:w="3"/><text x="45.0174%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (1,074 samples, 3.58%)</title><rect x="44.7774%" y="101" width="3.5841%" height="15" fill="rgb(253,11,6)" fg:x="13418" fg:w="1074"/><text x="45.0274%" y="111.50">libs..</text></g><g><title>libsystem_pthread.dylib`_pthread_cond_updateval (5 samples, 0.02%)</title><rect x="48.3615%" y="101" width="0.0167%" height="15" fill="rgb(247,143,39)" fg:x="14492" fg:w="5"/><text x="48.6115%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (3 samples, 0.01%)</title><rect x="48.3782%" y="101" width="0.0100%" height="15" fill="rgb(236,97,10)" fg:x="14497" fg:w="3"/><text x="48.6282%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_mutex_firstfit_unlock_slow (21 samples, 0.07%)</title><rect x="48.3882%" y="101" width="0.0701%" height="15" fill="rgb(233,208,19)" fg:x="14500" fg:w="21"/><text x="48.6382%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_mutexdrop (20 samples, 0.07%)</title><rect x="48.3915%" y="85" width="0.0667%" height="15" fill="rgb(216,164,2)" fg:x="14501" fg:w="20"/><text x="48.6415%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (10 samples, 0.03%)</title><rect x="48.4583%" y="101" width="0.0334%" height="15" fill="rgb(220,129,5)" fg:x="14521" fg:w="10"/><text x="48.7083%" y="111.50"></text></g><g><title>libgomp.1.dylib`gomp_team_barrier_wait_end (5,222 samples, 17.43%)</title><rect x="31.0986%" y="117" width="17.4264%" height="15" fill="rgb(242,17,10)" fg:x="9319" fg:w="5222"/><text x="31.3486%" y="127.50">libgomp.1.dylib`gomp_team_b..</text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (10 samples, 0.03%)</title><rect x="48.4916%" y="101" width="0.0334%" height="15" fill="rgb(242,107,0)" fg:x="14531" fg:w="10"/><text x="48.7416%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (385 samples, 1.28%)</title><rect x="48.5250%" y="117" width="1.2848%" height="15" fill="rgb(251,28,31)" fg:x="14541" fg:w="385"/><text x="48.7750%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_cond_signal (7 samples, 0.02%)</title><rect x="49.8098%" y="117" width="0.0234%" height="15" fill="rgb(233,223,10)" fg:x="14926" fg:w="7"/><text x="50.0598%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.01%)</title><rect x="49.8331%" y="117" width="0.0100%" height="15" fill="rgb(215,21,27)" fg:x="14933" fg:w="3"/><text x="50.0831%" y="127.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (4 samples, 0.01%)</title><rect x="49.8432%" y="117" width="0.0133%" height="15" fill="rgb(232,23,21)" fg:x="14936" fg:w="4"/><text x="50.0932%" y="127.50"></text></g><g><title>troons_bonus`simulate(int, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::vector&lt;Link*, std::allocator&lt;Link*&gt; &gt; const&amp;, std::vector&lt;Link, std::allocator&lt;Link&gt; &gt;&amp;, std::vector&lt;Link*, std::allocator&lt;Link*&gt; &gt; const&amp;, std::array&lt;std::array&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, 3ul&gt;, 2ul&gt; const&amp;, int, std::array&lt;int, 3ul&gt;&amp;, int) (14,983 samples, 50.00%)</title><rect x="49.8632%" y="117" width="50.0000%" height="15" fill="rgb(244,5,23)" fg:x="14942" fg:w="14983"/><text x="50.1132%" y="127.50">troons_bonus`simulate(int, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_..</text></g><g><title>libgomp.1.dylib`DYLD-STUB$$__emutls_get_address (3 samples, 0.01%)</title><rect x="99.8665%" y="101" width="0.0100%" height="15" fill="rgb(226,81,46)" fg:x="29926" fg:w="3"/><text x="100.1165%" y="111.50"></text></g><g><title>libgcc_s.1.1.dylib`__emutls_get_address (3 samples, 0.01%)</title><rect x="99.8799%" y="85" width="0.0100%" height="15" fill="rgb(247,70,30)" fg:x="29930" fg:w="3"/><text x="100.1299%" y="95.50"></text></g><g><title>libgomp.1.dylib`omp_get_num_threads (10 samples, 0.03%)</title><rect x="99.8765%" y="101" width="0.0334%" height="15" fill="rgb(212,68,19)" fg:x="29929" fg:w="10"/><text x="100.1265%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (6 samples, 0.02%)</title><rect x="99.8899%" y="85" width="0.0200%" height="15" fill="rgb(240,187,13)" fg:x="29933" fg:w="6"/><text x="100.1399%" y="95.50"></text></g><g><title>libgomp.1.dylib`omp_get_thread_num (6 samples, 0.02%)</title><rect x="99.9099%" y="101" width="0.0200%" height="15" fill="rgb(223,113,26)" fg:x="29939" fg:w="6"/><text x="100.1599%" y="111.50"></text></g><g><title>libsystem_pthread.dylib`pthread_getspecific (4 samples, 0.01%)</title><rect x="99.9166%" y="85" width="0.0133%" height="15" fill="rgb(206,192,2)" fg:x="29941" fg:w="4"/><text x="100.1666%" y="95.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_lock (3 samples, 0.01%)</title><rect x="99.9299%" y="101" width="0.0100%" height="15" fill="rgb(241,108,4)" fg:x="29945" fg:w="3"/><text x="100.1799%" y="111.50"></text></g><g><title>troons_bonus`void std::__introsort_loop&lt;WaitingTroon*, long, __gnu_cxx::__ops::_Iter_less_iter&gt;(WaitingTroon*, WaitingTroon*, long, __gnu_cxx::__ops::_Iter_less_iter) (5 samples, 0.02%)</title><rect x="99.9433%" y="101" width="0.0167%" height="15" fill="rgb(247,173,49)" fg:x="29949" fg:w="5"/><text x="100.1933%" y="111.50"></text></g><g><title>troons_bonus`simulate(int, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::vector&lt;Link*, std::allocator&lt;Link*&gt; &gt; const&amp;, std::vector&lt;Link, std::allocator&lt;Link&gt; &gt;&amp;, std::vector&lt;Link*, std::allocator&lt;Link*&gt; &gt; const&amp;, std::array&lt;std::array&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, 3ul&gt;, 2ul&gt; const&amp;, int, std::array&lt;int, 3ul&gt;&amp;, int)  (31 samples, 0.10%)</title><rect x="99.8632%" y="117" width="0.1035%" height="15" fill="rgb(224,114,35)" fg:x="29925" fg:w="31"/><text x="100.1132%" y="127.50"></text></g><g><title>libgomp.1.dylib`gomp_thread_start (25,299 samples, 84.43%)</title><rect x="15.5443%" y="133" width="84.4257%" height="15" fill="rgb(245,159,27)" fg:x="4658" fg:w="25299"/><text x="15.7943%" y="143.50">libgomp.1.dylib`gomp_thread_start</text></g><g><title>all (29,966 samples, 100%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(245,172,44)" fg:x="0" fg:w="29966"/><text x="0.2500%" y="191.50"></text></g><g><title>libsystem_pthread.dylib`thread_start (25,313 samples, 84.47%)</title><rect x="15.5276%" y="165" width="84.4724%" height="15" fill="rgb(236,23,11)" fg:x="4653" fg:w="25313"/><text x="15.7776%" y="175.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (25,313 samples, 84.47%)</title><rect x="15.5276%" y="149" width="84.4724%" height="15" fill="rgb(205,117,38)" fg:x="4653" fg:w="25313"/><text x="15.7776%" y="159.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>troons_bonus`simulate(int, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::vector&lt;Link*, std::allocator&lt;Link*&gt; &gt; const&amp;, std::vector&lt;Link, std::allocator&lt;Link&gt; &gt;&amp;, std::vector&lt;Link*, std::allocator&lt;Link*&gt; &gt; const&amp;, std::array&lt;std::array&lt;std::vector&lt;int, std::allocator&lt;int&gt; &gt;, 3ul&gt;, 2ul&gt; const&amp;, int, std::array&lt;int, 3ul&gt;&amp;, int) (9 samples, 0.03%)</title><rect x="99.9700%" y="133" width="0.0300%" height="15" fill="rgb(237,72,25)" fg:x="29957" fg:w="9"/><text x="100.2200%" y="143.50"></text></g></svg></svg>